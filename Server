package serverClasses;

import java.io.*;
import java.net.*;
import java.awt.*;
import java.awt.event.*;

import javax.swing.*;

@SuppressWarnings("serial")
public class Server extends JFrame {

	private JTextField userText;
	private JTextArea chatWindow;
	// private ObjectOutputStream output;
	// private ObjectInputStream input;
	private ServerSocket server;
	// private Socket connection;
	private int clientnum = 3;
	private int numconnected = 1;
	Clients C[] = new Clients[clientnum];
	private String myname = "Unknown";

	// constructor{

	public Server(String name) {

		super("1 on 1 chat lol");
		myname = name;
		userText = new JTextField();
		userText.setEditable(false);
		userText.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent event) {
				//
				sendMessage(event.getActionCommand());
				// reset text area
				userText.setText("");
			}
		});
		add(userText, BorderLayout.NORTH);
		chatWindow = new JTextArea();
		chatWindow.setEditable(false);
		add(new JScrollPane(chatWindow));

		C[0] = new Clients();
		setSize(300, 150);
		setVisible(true);
	}

	// set up and run the server

	public void startRunning() {
		try {
			server = new ServerSocket(6789, 100);
			while (true) {
				try {
					waitForConnection();
					//setupStreams();
					whileChatting();
				} catch (EOFException eofException) {
					showMessage("\n Server ended the connection! ");
				} finally {
					closeCrap();
				}
			}
		} catch (IOException ioException) {
			ioException.printStackTrace();
		}
	}

	// wait for connection, then display connection information
	private void waitForConnection() throws IOException {
		showMessage(" Waiting for someone to connect.. \n");
		C[0].connection = server.accept();
		C[0].setupConnections();
		showMessage("\n Streams are now setup \n");
		showMessage(" Now Connected to"
				+ C[0].connection.getInetAddress().getHostName());
	}

	// get stream to send and recieve data(no longer used)
	/*private void setupStreams() throws IOException {
		C[0].output = new ObjectOutputStream(C[0].connection.getOutputStream());
		C[0].output.flush();
		C[0].input = new ObjectInputStream(C[0].connection.getInputStream());

		showMessage("\n Streams are now setup \n");
	}*/

	// during the chat conversation
	private void whileChatting() throws IOException {
		String message = "you are now connected";
		sendMessage(message);
		ableToType(true);
		do {
			try {
				message = (String) C[0].input.readObject();
				showMessage("\n" + message);
				CheckNewConnections();
			} catch (ClassNotFoundException classNotFoundException) {
				showMessage("\n i didn't get it");
			}
			
		} while (true);
	}

	private void CheckNewConnections() throws IOException {
		showMessage("checking new connections?");
		
		//C[numconnected].connection = server.accept();
		showMessage(" Now Connected to"
				+ C[numconnected].connection.getInetAddress().getHostName());
		C[numconnected].setupConnections();
		showMessage("new user joined!");
		
	}

	// once done chatting. Close streams and sockets.
	private void closeCrap() {
		showMessage("\n Closing connections... \n");
		ableToType(false);
		try {
			C[0].output.close();
			C[0].input.close();
			C[0].connection.close();
		} catch (IOException ioException) {
			ioException.printStackTrace();
		}
	}

	// send a message to client
	private void sendMessage(String message) {
		try {
			C[0].output.writeObject(myname + " : " + message);
			C[0].output.flush();
			showMessage("\n" + myname + " : " + message);

		} catch (IOException ioException) {
			chatWindow.append("\n ERROR: DUDE I CANT SEND THAT MESSAGE");

		}
	}

	// updates chat window
	private void showMessage(final String text) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				chatWindow.append(text);
			}
		});
	}

	// let user type
	public void ableToType(final boolean tof) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				userText.setEditable(tof);
			}
		});
	}

}
